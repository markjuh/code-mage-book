#!/usr/bin/env bash

read -r -d '' helptxt <<EOF

This script is used for building this book.

	help  - print this help message
	epub  - build the dist/code-mage-book-<version>.epub
	pdf   - build the dist/code-mage-book-<version>.pdf
	html  - build the docs/index-<version>.html
	all   - build epub, pdf, html (default)
	watch - build on any change

For more information, see the README.md file.

EOF

# Read the version from the VERSION file
if [[ -z "$VERSION" && -f VERSION ]]; then
	VERSION=$(head -1 VERSION)
fi

x-help() {
	echo "$helptxt"
}

x-all() {
	x-html
	x-pdf
	x-epub
}

x-epub() {
	asciidoctor-epub3 \
		-D "dist" \
		-o "code-mage-book-v${VERSION}.epub" \
		-a pdf-fontsdir="./book/assets/fonts" \
		"./book/index.adoc"
}
#-a pdf-themesdir="./book/assets/themes" \
#-a pdf-theme="dark-theme.yml" \

x-pdf() {
	asciidoctor-pdf \
		-D "dist" \
		-o "code-mage-book-v${VERSION}.pdf" \
		-a pdf-themesdir="./book/assets/themes" \
		-a pdf-fontsdir="./book/assets/fonts" \
		"./book/index.adoc"
}

x-html() {
	asciidoctor \
		-D "docs" \
		-o "index.html" \
		-a copy_script=./book/assets/scripts/script.js \
		"./book/index.adoc"
}

x-clean() {
	rm -rf docs
	mkdir -p docs
}

x-watch() {
	if [[ ! -d book ]]; then
		echo "no book found, wrong directory?" && exit 1
	fi
	tmux rename-window "watching $(wd)/book"
	# while true; do
	entr bash -c '
        echo "Change detected. Rebuilding..."
				./build html
				' < <(find .)
	# sleep 1
	# done
}

# --------------------- completion and delegation --------------------

# The following provides bash completion with `complete -C build build`
# by deriving the names of the verbs for tab completion from those
# beginning with x- above. No other argument completion is provided.

while IFS= read -r line; do
	[[ $line =~ ^declare\ -f\ x\- ]] || continue
	commands+=("${line##declare -f x-}")
done < <(declare -F)
mapfile -t commands < \
	<(LC_COLLATE=C sort < <(printf "%s\n" "${commands[@]}"))

if [[ -n $COMP_LINE ]]; then
	line=${COMP_LINE#* }
	for c in "${commands[@]}"; do
		[[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
	done
	exit
fi

if [[ -n "$1" ]]; then
	declare action="$1"
	shift
	for c in "${commands[@]}"; do
		declare cmd
		cmd=$(command -v "x-$c")
		if [[ $c == "$action" && -n "$cmd" ]]; then
			"x-$action" "$@"
			exit $?
		fi
	done
fi

x-all
